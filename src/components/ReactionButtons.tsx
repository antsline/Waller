import React, { useState, useEffect } from 'react';
import { View, TouchableOpacity, Text, StyleSheet, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLike } from '../hooks/useLike';
import { useReaction, ReactionType } from '../hooks/useReaction';

interface ReactionButtonsProps {
  postId: string;
  likeCount: number;
  fireCount: number;
  clapCount: number;
  sparkleCount: number;
  muscleCount: number;
}

const REACTIONS = [
  { type: 'fire' as ReactionType, emoji: 'üî•', label: '„ÇÑ„Å∞„ÅÑ' },
  { type: 'clap' as ReactionType, emoji: 'üëè', label: '„Éä„Ç§„Çπ' },
  { type: 'sparkle' as ReactionType, emoji: '‚ú®', label: '„Åç„Çå„ÅÑ' },
  { type: 'muscle' as ReactionType, emoji: 'üí™', label: '„ÉÅ„É£„É¨„É≥„Ç∏' },
];

export function ReactionButtons({
  postId,
  likeCount,
  fireCount,
  clapCount,
  sparkleCount,
  muscleCount,
}: ReactionButtonsProps) {
  const { isLiked, toggleLike, isLoading: likeLoading } = useLike(postId);
  const {
    currentReaction,
    sendReaction,
    isLoading: reactionLoading,
    cooldownRemaining,
    canChange,
  } = useReaction(postId);

  // „É≠„Éº„Ç´„É´Áä∂ÊÖã„Åß„Ç´„Ç¶„É≥„Éà„ÇíÁÆ°ÁêÜÔºàÊ•ΩË¶≥ÁöÑÊõ¥Êñ∞Áî®Ôºâ
  const [localLikeCount, setLocalLikeCount] = useState(likeCount);
  const [localReactionCounts, setLocalReactionCounts] = useState({
    fire: fireCount,
    clap: clapCount,
    sparkle: sparkleCount,
    muscle: muscleCount,
  });

  // props„ÅåÂ§âÊõ¥„Åï„Çå„Åü„ÇâÂêåÊúü
  useEffect(() => {
    setLocalLikeCount(likeCount);
  }, [likeCount]);

  useEffect(() => {
    setLocalReactionCounts({
      fire: fireCount,
      clap: clapCount,
      sparkle: sparkleCount,
      muscle: muscleCount,
    });
  }, [fireCount, clapCount, sparkleCount, muscleCount]);

  const handleLikePress = async () => {
    // Ê•ΩË¶≥ÁöÑÊõ¥Êñ∞: „Ç´„Ç¶„É≥„Éà„ÇíÂç≥Â∫ß„Å´Êõ¥Êñ∞
    const previousCount = localLikeCount;
    setLocalLikeCount(isLiked ? previousCount - 1 : previousCount + 1);

    try {
      await toggleLike();
    } catch (error) {
      // „Ç®„É©„ÉºÊôÇ„ÅØ„É≠„Éº„É´„Éê„ÉÉ„ÇØ
      setLocalLikeCount(previousCount);
    }
  };

  const handleReactionPress = async (type: ReactionType) => {
    if (currentReaction === type) {
      // Âêå„Åò„Çπ„Çø„É≥„Éó„Çí„ÇÇ„ÅÜ‰∏ÄÂ∫¶Êäº„Åó„Åü„ÇâÂâäÈô§„ÅØ„Åó„Å™„ÅÑÔºà‰ªïÊßò‰∏ä„ÄÅÂâäÈô§„Éú„Çø„É≥„ÅØÂà•ÈÄîÂøÖË¶Å„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
      return;
    }

    // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥‰∏≠„ÅÆÂ†¥Âêà„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
    if (!canChange && currentReaction) {
      Alert.alert(
        '„Çπ„Çø„É≥„ÉóÂ§âÊõ¥„ÅÆ„ÇØ„Éº„É´„ÉÄ„Ç¶„É≥‰∏≠',
        `„Çπ„Çø„É≥„Éó„ÅÆÂ§âÊõ¥„ÅØ${cooldownRemaining}ÁßíÂæå„Å´ÂèØËÉΩ„Åß„Åô„ÄÇ\n\nÈÄÅ‰ø°Âæå10ÂàÜ‰ª•ÂÜÖ„ÅØËá™Áî±„Å´Â§âÊõ¥„Åß„Åç„Åæ„Åô„ÄÇ`,
        [{ text: 'OK' }]
      );
      return;
    }

    // Ê•ΩË¶≥ÁöÑÊõ¥Êñ∞: „Ç´„Ç¶„É≥„Éà„ÇíÂç≥Â∫ß„Å´Êõ¥Êñ∞
    const previousCounts = { ...localReactionCounts };
    setLocalReactionCounts((prev) => {
      const newCounts = { ...prev };

      // Êó¢Â≠ò„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Åå„ÅÇ„Çå„Å∞-1
      if (currentReaction) {
        newCounts[currentReaction] = Math.max(0, newCounts[currentReaction] - 1);
      }

      // Êñ∞„Åó„ÅÑ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Å´+1
      newCounts[type] = newCounts[type] + 1;

      return newCounts;
    });

    try {
      await sendReaction(type);
    } catch (error) {
      // „Ç®„É©„ÉºÊôÇ„ÅØ„É≠„Éº„É´„Éê„ÉÉ„ÇØ
      setLocalReactionCounts(previousCounts);
    }
  };

  return (
    <View style={styles.container}>
      {/* „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ÔºàÊ®™‰∏¶„Å≥‰∏ÄÂàóÔºâ */}
      <View style={styles.reactionsRow}>
        {/* „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥ */}
        <TouchableOpacity
          style={styles.likeButton}
          onPress={handleLikePress}
          disabled={likeLoading}
          activeOpacity={0.7}
        >
          <Ionicons
            name={isLiked ? 'heart' : 'heart-outline'}
            size={22}
            color={isLiked ? '#F44336' : '#9E9E9E'}
          />
          <Text style={[styles.count, isLiked && styles.countActive]}>{localLikeCount}</Text>
        </TouchableOpacity>

        {/* „Çπ„Çø„É≥„Éó„Éú„Çø„É≥ */}
        {REACTIONS.map((reaction) => {
          const isSelected = currentReaction === reaction.type;
          const count = localReactionCounts[reaction.type];

          return (
            <TouchableOpacity
              key={reaction.type}
              style={[
                styles.reactionButton,
                isSelected && styles.reactionButtonSelected,
              ]}
              onPress={() => handleReactionPress(reaction.type)}
              disabled={reactionLoading}
              activeOpacity={0.7}
            >
              <Text style={styles.reactionEmoji}>{reaction.emoji}</Text>
              <Text style={[styles.count, isSelected && styles.countSelected]}>
                {count}
              </Text>
            </TouchableOpacity>
          );
        })}
      </View>

      {/* „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥Ë°®Á§∫ÔºàÂ∞è„Åï„ÇÅ„Å´Ôºâ */}
      {cooldownRemaining > 0 && (
        <View style={styles.cooldownContainer}>
          <Ionicons name="time-outline" size={12} color="#FF6B00" />
          <Text style={styles.cooldownText}>
            Â§âÊõ¥„ÅØ{cooldownRemaining}ÁßíÂæå„Å´ÂèØËÉΩ
          </Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    paddingVertical: 8,
  },
  reactionsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  likeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 6,
    paddingHorizontal: 8,
    borderRadius: 16,
    backgroundColor: '#F5F5F5',
    gap: 4,
    minWidth: 50,
    justifyContent: 'center',
  },
  reactionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 6,
    paddingHorizontal: 8,
    borderRadius: 16,
    backgroundColor: '#F5F5F5',
    gap: 3,
    minWidth: 48,
    justifyContent: 'center',
  },
  reactionButtonSelected: {
    backgroundColor: '#FFF3E0',
    borderWidth: 2,
    borderColor: '#FF6B00',
  },
  reactionEmoji: {
    fontSize: 16,
  },
  count: {
    fontSize: 12,
    fontWeight: '600',
    color: '#9E9E9E',
  },
  countActive: {
    color: '#F44336',
  },
  countSelected: {
    color: '#FF6B00',
  },
  cooldownContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 6,
    paddingVertical: 4,
    paddingHorizontal: 8,
    backgroundColor: '#FFF3E0',
    borderRadius: 6,
    gap: 4,
    alignSelf: 'flex-start',
  },
  cooldownText: {
    fontSize: 11,
    color: '#E65100',
    fontWeight: '500',
  },
});
