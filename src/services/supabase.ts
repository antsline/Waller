import { createClient } from '@supabase/supabase-js';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Constants from 'expo-constants';
import axios from 'axios';

// Expo Constants„Åã„ÇâÁí∞Â¢ÉÂ§âÊï∞„ÇíÂèñÂæó
const supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl || process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey || process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

console.log('üîç Supabase Config Check:');
console.log('URL exists:', !!supabaseUrl);
console.log('Key exists:', !!supabaseAnonKey);
if (supabaseUrl) {
  console.log('URL:', supabaseUrl.substring(0, 30) + '...');
}

// Validate URL format
if (supabaseUrl && !supabaseUrl.startsWith('http')) {
  console.error('‚ùå Invalid Supabase URL format. Must start with http:// or https://');
  throw new Error('Invalid Supabase URL format');
}

if (!supabaseUrl || !supabaseAnonKey) {
  const errorMsg =
    'SupabaseÁí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ\n' +
    `URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}\n` +
    `Key: ${supabaseAnonKey ? '‚úÖ' : '‚ùå'}\n` +
    '„Ç¢„Éó„É™„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºànpm start -cÔºâ';
  console.error(errorMsg);
  throw new Error(errorMsg);
}

console.log('üîß Creating Supabase client with axios...');

// axios„Éô„Éº„Çπ„ÅÆfetchÂÆüË£Ö„Çí‰ΩúÊàê
const customFetch = async (url: RequestInfo | URL, options?: RequestInit) => {
  const urlString = typeof url === 'string' ? url : url.toString();

  console.log('üåê Custom fetch called:', urlString.substring(0, 50) + '...');

  try {
    const response = await axios({
      url: urlString,
      method: (options?.method as any) || 'GET',
      headers: options?.headers as any,
      data: options?.body,
      validateStatus: () => true, // „Åô„Åπ„Å¶„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ„ÇíÂèó„ÅëÂÖ•„Çå„Çã
    });

    // Response‰∫íÊèõ„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíËøî„Åô
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText,
      headers: new Headers(response.headers as any),
      json: async () => response.data,
      text: async () => JSON.stringify(response.data),
    } as Response;
  } catch (error) {
    console.error('‚ùå Axios fetch error:', error);
    throw error;
  }
};

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
  global: {
    fetch: customFetch as any,
  },
});

console.log('‚úÖ Supabase client created successfully with axios');
